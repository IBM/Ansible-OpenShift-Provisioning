---

- name: 6 create nodes - find lpar host files
  hosts: localhost
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - block:
      - name: Loop over node types and include role
        include_role:
          name: check_for_lpar_nodes
        loop:
          - bootstrap
          - control
          - compute
        loop_control:
          loop_var: node_type
        register: result
      ignore_errors: true

    - name: fail the play if the previous command did not succeed
      fail: msg="Check for lpar nodes failed for bootstrap or control node"
      when:
        - "'bootstrap' in result.msg"
        - "'control' in result.msg"

# Prepare and then create the temporary bootstrap node and the control nodes
- name: 6 create nodes - prepare KVM guests
  hosts: kvm_host
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - { role: prep_kvm_guests, when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }
    # Delete control, compute and infra nodes, if exists
    - { role: delete_nodes, when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }

- name: 6 create nodes - create bootstrap
  hosts: kvm_host[0]
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - { role: common,  when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }
    - { role: create_bootstrap, when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }

- name: 6 create nodes - bootstrap and control ( if in lpar )
  hosts: bastion
  become: true
  tasks:
    - name: boot bootstrap
      vars:
        node_type: "bootstrap"
        node_name: "{{ item }}"
        ignition: "bootstrap"
      include_tasks:
        file: ../roles/boot_LPAR/tasks/main.yaml
      loop: "{{ q('list',env.cluster.nodes[node_type].vm_name) | flatten }}"
      when: item in hosts_with_host_vars

    - name: boot control nodes
      vars:
        node_type: "control"
        node_name: "{{ item }}"
        ignition: "master"
      include_tasks:
        file: ../roles/boot_LPAR/tasks/main.yaml
      loop: "{{ q('list',env.cluster.nodes[node_type].vm_name) | flatten }}"
      when: item in hosts_with_host_vars

- name: 6 create nodes - create control nodes
  hosts: kvm_host
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - common
    - create_control_nodes

- name: 6 create nodes - wait for bootstrap to connect control plane
  hosts: bastion
  become: true
  environment:
    KUBECONFIG: "{{ '/home/' if (env.bastion.access.user != 'root') else '/'}}{{ env.bastion.access.user }}/.kube/config"
  gather_facts: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - wait_for_bootstrap

- name: 6 create nodes - once bootstrapping is complete, tear down bootstrap.
  hosts: kvm_host[0]
  tags: create_nodes, teardown_bootstrap
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Destroy bootstrap. Expect ignored errors if bootstrap is already destroyed.
      tags: create_nodes, teardown_bootstrap
      community.libvirt.virt:
        name: "{{ env.cluster.nodes.bootstrap.vm_name }}"
        command: destroy
      ignore_errors: true
      when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars

    - name: Undefine bootstrap. Expect ignored errors if bootstrap is already undefined.
      tags: create_nodes, teardown_bootstrap
      community.libvirt.virt:
        name: "{{ env.cluster.nodes.bootstrap.vm_name }}"
        command: undefine
      ignore_errors: true

- name: 6 create nodes - once bootstrapping is complete, create compute nodes.
  hosts: kvm_host
  tags: create_compute_nodes
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - { role: common, when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }
    - { role: create_compute_nodes, when: env.cluster.nodes.bootstrap.vm_name not in hosts_with_host_vars }

- name: 6 create nodes - compute ( if in lpar )
  hosts: bastion
  become: true
  tasks:
    - name: boot compute nodes
      vars:
        node_type: "compute"
        node_name: "{{ item }}"
        ignition: "worker"
      include_tasks:
        file: ../roles/boot_LPAR/tasks/main.yaml
      loop: "{{ q('list',env.cluster.nodes[node_type].vm_name) | flatten }}"
      when: item in hosts_with_host_vars
