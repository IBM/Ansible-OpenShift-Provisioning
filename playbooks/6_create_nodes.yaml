---

- hosts: hypervisors
  tags: prep
  gather_facts: false
  tasks:
    - name: Get Red Hat CoreOS kernel and initramfs from URL to <pool_path>
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: '0755'
      loop:
        - { url: "{{ rhcos_download_url }}{{ rhcos_live_kernel }}", dest: "{{ pool_path }}/{{ rhcos_live_kernel }}" }
        - { url: "{{ rhcos_download_url }}{{ rhcos_live_initrd }}", dest: "{{ pool_path }}/{{ rhcos_live_initrd }}" }
      
- name: Create temporary bootstrap node.
  tags: create_bootstrap_node
  hosts: hypervisors
  any_errors_fatal: True
  gather_facts: True
  vars:
    target_nodes: 'bootstrap_node'
  pre_tasks:
    - name: Determine which hypervisor is hosting the bootstrap node.
      tags: test
      set_fact:
        hypervisor_with_bootstrap: "{{ inventory_hostname }}"
        cacheable: true
      when: "'bootstrap_node' in guests"
  roles:
    - { role: delete_nodes, when: "inventory_hostname == hypervisor_with_bootstrap | default('hypervisors[-1]')" }
    - { role: create_nodes, when: "inventory_hostname == hypervisor_with_bootstrap | default('hypervisors[-1]')" }

- name: Create control nodes.
  hosts: hypervisors
  tags: create_control_nodes
  gather_facts: true
  vars:
    target_nodes: 'control'
  roles:
    - delete_nodes
    - create_nodes

- name: Wait for bootstrap to connect control plane.
  hosts: bastion
  become: True
  environment:
    KUBECONFIG: "{% if bastion_user == 'root' %}/root/.kube/config{% else %}/home/{{ bastion_user }}/.kube/config{% endif %}"
  gather_facts: true
  roles:
    - wait_for_bootstrap

- name: Once bootstrapping is complete, tear down node.
  hosts: hypervisors
  tags: create_nodes, teardown_bootstrap
  gather_facts: False
  vars:
    target_nodes: 'bootstrap_node'
  pre_tasks:
    - name: Determine which hypervisor is hosting the bootstrap node.
      set_fact:
        hypervisor_with_bootstrap: "{{ inventory_hostname }}"
      when: "'bootstrap_node' in guests and hypervisor_with_bootstrap is undefined"
  roles:
    - { role: delete_nodes, when: "inventory_hostname == hypervisor_with_bootstrap | default('hypervisors[-1]')" }

- name: Remove bootstrap info from bastion's services.
  hosts: bastion
  become: true
  tasks:
    - name: Remove references to bootstrap node from DNS.
      tags: create_nodes, teardown_bootstrap, dns
      include_role:
        name: dns
        tasks_from: delete.yaml
      loop: "{{ [hostvars['bootstrap_node'].inventory_hostname] }}"
      loop_control: 
        loop_var: node
      when: setup_dns

    - name: Check DNS is working for rest of nodes after deleting bootstrap.
      include_role:
        name: check_dns
        tasks_from: delete.yaml
      loop: "{{ groups['compute_nodes'] + groups['control_nodes'] }}"
      loop_control:
        loop_var: node

    - name: Remove references to bootstrap node from loadbalancer.
      tags: create_nodes, teardown_bootstrap, haproxy
      include_role:
        name: haproxy
        tasks_from: delete.yaml
      loop: "{{ [hostvars['bootstrap_node'].inventory_hostname] }}"
      loop_control:
        loop_var: node
      when: setup_lb

- name: Create compute nodes.
  hosts: hypervisors
  tags: create_compute_nodes
  gather_facts: true
  vars:
    target_nodes: 'compute'
  roles:
    - delete_nodes
    - create_nodes