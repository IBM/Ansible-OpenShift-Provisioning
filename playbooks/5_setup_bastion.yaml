---

- name: Copy ssh key to jumphost if network is NAT and jumphost defined, and add jumphost section to ssh config.
  hosts: controller
  tags: ssh, ssh_copy_id, section_1
  gather_facts: false
  vars:
    nat_hypervisor_any: groups['hypervisors'] | map('extract', hostvars, ['network_mode']) | map('upper') | select('equalto', 'NAT') | list | length > 0
    ssh_target: "{{ 'jumphost' if (nat_hypervisor_any | default(False)) else '' }}"
  pre_tasks:
    - name: Set ssh_target variable conditionally
      set_fact:
        ssh_target: "{{ hostvars['jumphost'].ansible_host }}"
      when: nat_hypervisor_any and 'jumphost' in hostvars
  roles:
    - { role: ssh_copy_id, when: nat_hypervisor_any and 'jumphost' in hostvars }
    - { role: ssh_add_config, when: nat_hypervisor_any and 'jumphost' in hostvars }

- name: Configure jumphost if network mode == 'NAT'
  hosts: jumphost
  tags: ssh, ssh_copy_id, section_1
  gather_facts: true
  vars:
    ssh_target: bastion
    nat_hypervisor_any: groups['hypervisors'] | map('extract', hostvars, ['network_mode']) | map('upper') | select('equalto', 'NAT') | list | length > 0
  pre_tasks:
    - name: Generate an OpenSSH keypair with the default values (4096 bits, RSA), if using jumphost for NAT.
      tags: ssh_key_gen, ssh
      community.crypto.openssh_keypair:
        path: "{{ hostvars['jumphost'].ssh_jumphost_private_key_file }}"
        passphrase: ""
        regenerate: never
      when: nat_hypervisor_any and 'jumphost' in hostvars

    - block:
        - name: Check if 'expect' is installed on jumphost, for use in ssh-copy-id role for NAT.
          package_facts:
          failed_when: "'expect' not in ansible_facts.packages"
          when: nat_hypervisor_any and 'jumphost' in hostvars

      rescue:
        - name: Package 'expect' must be installed on the jumphost, attempting to install it. #Using 'block' and 'rescue' to avoid running the 'package' module (which requires 'sudo') unless necessary.
          become: true
          package:
            name: expect
          when: nat_hypervisor_any and 'jumphost' in hostvars

    - name: Copy SSH key from jumphost to bastion using expect script.
      tags: ssh_copy_id, ssh
      include_role: 
        name: ssh_copy_id
        tasks_from: jumphost.yaml
      when: nat_hypervisor_any and 'jumphost' in hostvars

    - meta: clear_facts

- import_playbook: connect_hosts.yaml
  vars:
    ssh_target: bastion

- name: 5 setup bastion - configure bastion node with essential services
  hosts: bastion
  tags: services, section_2
  become: True
  pre_tasks:
    - name: Setup /etc/resolv.conf for bastion to pull packages.
      import_role:
        name: dns
        tasks_from: initial-resolv.yaml

    - name: Generate SSH keypair for cluster access.
      tags: ssh_key_gen
      import_role: 
        name: ssh_key_gen
        tasks_from: cluster_key_gen.yaml

  roles:
    - { role: attach_subscription, when: "rh_username is defined and rh_pass is defined" }
    - install_packages
    - set_firewall
    - { role: dns, when: "setup_dns" }
    - check_dns
    - { role: haproxy, when: "setup_lb" }
    - httpd

- name: Setup OpenVPN (1/5)
  hosts: bastion
  tags: services, section_2, openvpn
  become: True
  gather_facts: True
  vars:
    openvpn_role: "server"
  roles:
    #- { role: robertdebock.bootstrap, tags: openvpn, when: setup_openvpn }
    - { role: robertdebock.epel, tags: openvpn, when: setup_openvpn }
    - { role: robertdebock.openvpn, tags: openvpn, when: setup_openvpn }

- name: Setup OpenVPN (2/5)
  hosts: controller
  tags: services, section_2, openvpn
  gather_facts: True
  tasks:
    - name: Create landing directories on controller for certificates and keys.
      tags: openvpn
      file:
        state: directory
        path: "{{ playbook_dir }}/tmp"
      when: hostvars['bastion'].setup_openvpn

- name: Setup OpenVPN (3/5)
  hosts: bastion
  tags: services, section_2, openvpn
  become: true
  tasks:
    - name: Fetch certificates and keys from bastion.
      tags: openvpn
      fetch:
        src: /etc/openvpn/easy-rsa/pki/{{ item }}
        dest: "{{ playbook_dir }}/tmp/"
        flat: yes
      loop:
        - ca.crt
        - issued/client.crt
        - private/client.key
        - ta.key
      when: setup_openvpn

- name: Gather facts from bastion.
  hosts: bastion
  tags: services, section_2, openvpn
  gather_facts: True

- name: Setup OpenVPN (4/5)
  hosts: hypervisors
  tags: services, section_2, openvpn
  become: True
  gather_facts: False
  vars:
    openvpn_role: "client"
    openvpn_client_server: "{{ hostvars['bastion'].bastion_ip }}"
  pre_tasks:

    - name: Gather facts.
      setup:
      when: hostvars['bastion'].setup_openvpn

    - name: Create landing directories for certificates and keys on hypervisors.
      tags: openvpn
      file:
        state: directory
        path: /etc/openvpn/client/{{ item }}
        mode: '700'
      loop:
        - issued
        - private
      when: hostvars['bastion'].setup_openvpn

    - name: Copy certificates and keys from controller to hypervisors.
      tags: openvpn
      copy:
        src: "{{ playbook_dir }}/tmp/{{ item }}"
        dest: /etc/openvpn/client/{{ item }}
        mode: '600'
      loop:
        - ca.crt
        - client.crt
        - client.key
        - ta.key
      when: hostvars['bastion'].setup_openvpn
  roles:
    - { role: robertdebock.epel, tags: openvpn, when: "hostvars['bastion'].setup_openvpn" }
    - { role: robertdebock.openvpn, tags: openvpn, when: "hostvars['bastion'].setup_openvpn" }

- hosts: controller
  tags: services, section_2, openvpn
  gather_facts: false
  tasks:
    - name: Clean up tmp directories on controller for certificates and keys.
      tags: openvpn
      file:
        state: absent
        path: "{{ playbook_dir }}/tmp"
      when: hostvars['bastion'].setup_openvpn

- hosts: bastion
  tags: get_ocp, section_3
  become: True
  roles:
    - common
    - get_ocp
