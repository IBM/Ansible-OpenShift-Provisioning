---

- name: Install CoreOS on compute nodes
  tags: create_compute_nodes
  ansible.builtin.shell: |
    set -o pipefail
    virsh destroy {{ env.cluster.nodes.compute.vm_name[i] }} || true
    virsh undefine {{ env.cluster.nodes.compute.vm_name[i] }} --remove-all-storage || true
    virt-install \
    --name {{ env.cluster.nodes.compute.vm_name[i] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant | lower) }} \
    --autostart \
    --disk size={{ env.cluster.nodes.compute.disk_size }}  \
    --ram {{ env.cluster.nodes.compute.ram }} \
    --cpu host \
    --vcpus {{ env.cluster.nodes.compute.vcpu }} \
    --network network={{ env.bridge_name }} \
    --location {{ rhcos_baseurl }},kernel={{ _rhcos.live_kernel }},initrd={{ _rhcos.live_initrd }} \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
    ip={{ env.cluster.nodes.compute.ip[i] }}::{{ networking.gateway }}:{{ networking.subnetmask }}:{{ env.cluster.nodes.compute.hostname[i] }}::none:1500 \
    nameserver={{ env.cluster.networking.nameserver1 }} \
    coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ _rhcos.live_rootfs }} \
    coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}" \
    --graphics none \
    --console pty,target_type=serial \
    --wait=-1 \
    --noautoconsole
  timeout: 300
  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1
  loop_control:
    extended: yes
    index_var: i
  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname

- name: Install CoreOS on infra nodes
  tags: create_compute_nodes
  command: |
    virt-install \
    --name {{ env.cluster.nodes.infra.vm_name[i] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant | lower) }} \
    --autostart \
    --disk size={{ env.cluster.nodes.infra.disk_size }}  \
    --ram {{ env.cluster.nodes.infra.ram }} \
    --cpu host \
    --vcpus {{ env.cluster.nodes.infra.vcpu }} \
    --network network={{ env.bridge_name }} \
    --location /var/lib/libvirt/images,kernel=rhcos-live-kernel-{{ env.openshift.version }}-{{ env.install_config.control.architecture }},initrd=rhcos-live-initramfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/rhcos-live-rootfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img ip={{ env.cluster.nodes.infra.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.infra.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign" \
    --wait=-1 \
    --noautoconsole
  with_sequence: start=0 end={{ ( env.cluster.nodes.infra.hostname | length ) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  when: env.cluster.nodes.infra.hostname is defined and env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname

#If cluster is to be highly available, split control and infra nodes into lists corresponding to their future KVM hosts.

- name: Split information from compute nodes into groups. The number of groups being equal to the number of KVM hosts there are.
  tags: create_compute_nodes
  set_fact:
    compute_name: "{{ env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
    compute_hostname: "{{ env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
    compute_ip: "{{ env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
  when: env.z.high_availability == True

- name: Split information for infra nodes into groups. The number of groups being equal to the number of KVM hosts there are.
  tags: create_compute_nodes
  set_fact:
    infra_name: "{{ env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
    infra_hostname: "{{ env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
    infra_ip: "{{ env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"
  when: env.z.high_availability == True and env.cluster.nodes.infra.hostname is defined

- name: Create CoreOS compute nodes on KVM hosts, if cluster is to be highly available.
  tags: create_compute_nodes
  command: |
    virt-install \
    --name {{ compute_name[i] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant | lower) }}
    --autostart \
    --disk size={{ env.cluster.nodes.compute.disk_size }}  \
    --ram {{ env.cluster.nodes.compute.ram }} \
    --cpu host \
    --vcpus {{ env.cluster.nodes.compute.vcpu }} \
    --network network={{ env.bridge_name }} \
    --location /var/lib/libvirt/images,kernel=rhcos-live-kernel-{{ env.openshift.version }}-{{ env.install_config.control.architecture }},initrd=rhcos-live-initramfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/rhcos-live-rootfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img ip={{ compute_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ compute_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign" \
    --wait=-1 \
    --noautoconsole
  loop: "{{ compute_name | zip(compute_hostname, compute_ip) | list }}"
  loop_control:
    extended: yes
    index_var: i
  when: env.z.high_availability == True and compute_hostname[i] is defined

- name: Create CoreOS infra nodes on KVM hosts, if cluster is to be highly available.
  tags: create_compute_nodes
  command: |
    virt-install \
    --name {{ infra_name[i] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant | lower) }} \
    --autostart \
    --disk size={{ env.cluster.nodes.infra.disk_size }}  \
    --ram {{ env.cluster.nodes.infra.ram }} \
    --cpu host \
    --vcpus {{ env.cluster.nodes.infra.vcpu }} \
    --network network={{ env.bridge_name }} \
    --location /var/lib/libvirt/images,kernel=rhcos-live-kernel-{{ env.openshift.version }}-{{ env.install_config.control.architecture }},initrd=rhcos-live-initramfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/rhcos-live-rootfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img ip={{ infra_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ infra_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign" \
    --wait=-1 \
    --noautoconsole
  loop: "{{ infra_name | zip(infra_hostname, infra_ip) | list }}"
  loop_control:
    extended: yes
    index_var: i
  when: env.cluster.nodes.infra.hostname is defined and infra_hostname[i] is defined and env.z.high_availability == True
