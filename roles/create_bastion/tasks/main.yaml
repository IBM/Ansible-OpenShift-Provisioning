---

- name: Create a directory on the KVM host server for bastion configuration files
  become: false
  tags: create_bastion
  ansible.builtin.file:
    path: "{{ env.ftp.cfgs_dir }}/{{ env.bastion.networking.hostname }}"
    mode: "0755"
    state: directory

- name: Copy template kickstart file to KVM host server
  tags: create_bastion
  become: false
  ansible.builtin.template:
    src: "bastion-ks.cfg.j2"
    dest: "{{ env.ftp.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"
    mode: "0644"
    force: true

- name: Create hash from bastion's root password to input in kickstart file
  tags: create_bastion
  ansible.builtin.shell: |
    set -o pipefail
    echo "{{ env.bastion.access.root_pass }}" | openssl passwd -6 -in -
  register: root_pass_hash

- name: Add hashed root password to bastion's RHEL kickstart config file
  tags: create_bastion
  become: false
  ansible.builtin.lineinfile:
    path: "{{ env.ftp.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"
    insertafter: "Root password"
    line: "rootpw --iscrypted {{ root_pass_hash.stdout }}"

- name: Create hash from bastion user password to input in kickstart file
  tags: create_bastion
  ansible.builtin.shell: |
    set -o pipefail
    echo "{{ env.bastion.access.pass }}" | openssl passwd -6 -in -
  register: user_pass_hash

- name: Add hashed user password to bastion's RHEL kickstart config file
  tags: create_bastion
  become: false
  ansible.builtin.lineinfile:
    path: "{{ env.ftp.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"
    insertafter: "Users and Groups Definitions"
    line: "user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted"

- name: Get KVM host home for use in next step
  tags: create_bastion, virt-install
  become: false
  ansible.builtin.command: pwd
  register: kvm_host_home

- name: Boot and kickstart bastion (up to 3 min). To monitor, login to your KVM host and run 'virsh console <bastion VM name>'
  tags: create_bastion, virt-install
  ansible.builtin.shell: |
    set -o pipefail
    virsh destroy {{ env.bastion.vm_name }} || true
    virsh undefine {{ env.bastion.vm_name }} --remove-all-storage || true
    virt-install \
    --name {{ env.bastion.vm_name }} \
    --autostart \
    --memory={{ env.bastion.resources.ram }} \
    --vcpus={{ env.bastion.resources.vcpu }} \
    --location http://{{ env.ftp.ip }}/{{ env.ftp.iso_mount_dir }} \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.bastion.resources.disk_size }}  \
    --network network={{ env.bridge_name }} \
    --graphics=none \
    --noautoconsole --wait=-1 \
    --initrd-inject "/{{ kvm_host_home.stdout }}/{{ env.ftp.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg" \
    --extra-args "inst.ks=file:/bastion-ks.cfg ip={{ env.bastion.networking.ip }}::{{ env.bastion.networking.gateway }}\
    :{{ env.bastion.networking.subnetmask }}:{{ env.bastion.networking.hostname }}:enc1:none console=ttysclp0"

- name: Waiting 1 minute for automated bastion installation and configuration to complete
  tags: create_bastion, virt-install
  ansible.builtin.pause:
    minutes: 1
