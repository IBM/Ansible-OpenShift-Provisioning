---

- name: Create CoreOS control nodes on the the KVM host.
  tags: create_control_nodes
  shell: |
    virt-install \
    --name {{ env.cluster.nodes.control.vm_name[i] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \
    --autostart \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }},cache=none,io=native \
    --ram {{ env.cluster.nodes.control.ram }} \
    {{ env.cluster.nodes.control.vcpu_model_option }} \
    --vcpus {{ env.cluster.nodes.control.vcpu }} \
    --network network={{ env.vnet_name }}{{ (',mac=' + env.cluster.nodes.control.mac[i]) if (env.cluster.nodes.control.mac[i] is defined and env.use_dhcp) }} \
    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda" \
    --extra-args "coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }}" \
    {% if (env.cluster.nodes.control.mac[i] is defined and env.use_dhcp) %}
    --extra-args "ip=dhcp" \
    {% else %}
    --extra-args "ip={{ env.cluster.nodes.control.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:{{ env.cluster.networking.interface }}:none:1500" \
    --extra-args "{{ ('ip=[' + env.cluster.nodes.control.ipv6[i] + ']::[' + env.cluster.networking.ipv6_gateway +']:' + env.cluster.networking.ipv6_prefix | string + '::' + env.cluster.networking.interface + ':none' ) if env.use_ipv6 == True else '' }}" \
    {% endif %}
    --extra-args "nameserver={{ env.cluster.networking.nameserver1 }}" \
    --extra-args "{{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }}" \
    --extra-args "coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign" \
    --extra-args "{{ _vm_console }}" \
    --memballoon none \
    --graphics none \
    --console pty,target_type=serial \
    --wait=-1 \
    --noautoconsole
  timeout: 360
  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1
  loop_control:
    extended: yes
    index_var: i
  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname
#    {{ ('ip=[' + env.cluster.nodes.control.ipv6[i] + ']::[' + env.cluster.networking.ipv6_gateway +']:' + env.cluster.networking.ipv6_prefix | string + '::' + env.cluster.networking.interface + ':none' ) if env.use_ipv6 == True else '' }} \

- name: Create the first CoreOS control node on the first KVM host, if cluster is to be highly available.
  tags: create_control_nodes
  shell: |
    virt-install \
    --name {{ env.cluster.nodes.control.vm_name[0] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \
    --autostart \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }},cache=none,io=native \
    --ram {{ env.cluster.nodes.control.ram }} \
    {{ env.cluster.nodes.control.vcpu_model_option }} \
    --vcpus {{ env.cluster.nodes.control.vcpu }} \
    --network network={{ env.vnet_name }}{{ (',mac=' + env.cluster.nodes.control.mac[0]) if (env.cluster.nodes.control.mac[0] is defined and env.use_dhcp) }} \
    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda" \
    --extra-args "coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }}" \
    {% if (env.cluster.nodes.control.mac[0] is defined and env.use_dhcp) %}
    --extra-args "ip=dhcp" \
    {% else %}
    --extra-args "ip={{ env.cluster.nodes.control.ip[0] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[0] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:{{ env.cluster.networking.interface }}:none:1500" \
    --extra-args "{{ ('ip=[' + env.cluster.nodes.control.ipv6[0] + ']::[' + env.cluster.networking.ipv6_gateway +']:' + env.cluster.networking.ipv6_prefix | string + '::' + env.cluster.networking.interface + ':none' ) if env.use_ipv6 == True else '' }}" \
    {% endif %}
    --extra-args "nameserver={{ env.cluster.networking.nameserver1 }}" \
    --extra-args "{{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }}" \
    --extra-args "coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign" \
    --extra-args "{{ _vm_console }}" \
    --memballoon none \
    --graphics none \
    --wait=-1 \
    --noautoconsole
  when: env.z.high_availability == True and inventory_hostname == env.z.lpar1.hostname

- name: Create the second CoreOS control node on the second KVM host, if cluster is to be highly available.
  tags: create_control_nodes
  shell: |
    virt-install \
    --name {{ env.cluster.nodes.control.vm_name[1] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \
    --autostart \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }},cache=none,io=native \
    --ram {{ env.cluster.nodes.control.ram }} \
    {{ env.cluster.nodes.control.vcpu_model_option }} \
    --vcpus {{ env.cluster.nodes.control.vcpu }} \
    --network network={{ env.vnet_name }}{{ (',mac=' + env.cluster.nodes.control.mac[1]) if (env.cluster.nodes.control.mac[1] is defined and env.use_dhcp) }} \
    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda" \
    --extra-args "coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }}" \
    {% if (env.cluster.nodes.control.mac[1] is defined and env.use_dhcp) %}
    --extra-args "ip=dhcp" \
    {% else %}
    --extra-args "ip={{ env.cluster.nodes.control.ip[1] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[1] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}::none:1500" \
    --extra-args "{{ ('ip=[' + env.cluster.nodes.control.ipv6[1] + ']::[' + env.cluster.networking.ipv6_gateway +']:' + env.cluster.networking.ipv6_prefix | string + '::' env.cluster.networking.interface + ':none' ) if env.use_ipv6 == True else '' }}" \
    {% endif %}
    --extra-args "nameserver={{ env.cluster.networking.nameserver1 }}" \
    --extra-args "{{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }}" \
    --extra-args "coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign" \
    --extra-args "{{ _vm_console }}" \
    --memballoon none \
    --graphics none \
    --wait=-1 \
    --noautoconsole
  when: env.z.high_availability == True and inventory_hostname == env.z.lpar2.hostname

- name: Create the third CoreOS control node on the third KVM host, if cluster is to be highly available.
  tags: create_control_nodes
  shell: |
    virt-install \
    --name {{ env.cluster.nodes.control.vm_name[2] }} \
    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \
    --autostart \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }},cache=none,io=native \
    --ram {{ env.cluster.nodes.control.ram }} \
    {{ env.cluster.nodes.control.vcpu_model_option }} \
    --vcpus {{ env.cluster.nodes.control.vcpu }} \
    --network network={{ env.vnet_name }}{{ (',mac=' + env.cluster.nodes.control.mac[2]) if (env.cluster.nodes.control.mac[2] is defined and env.use_dhcp) }} \
    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda" \
    --extra-args "coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }}" \
    {% if (env.cluster.nodes.control.mac[2] is defined and env.use_dhcp) %}
    --extra-args "ip=dhcp" \
    {% else %}
    --extra-args "ip={{ env.cluster.nodes.control.ip[2] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[2] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}::none:1500" \
    --extra-args "{{ ('ip=[' + env.cluster.nodes.control.ipv6[2] + ']::[' + env.cluster.networking.ipv6_gateway +']:' + env.cluster.networking.ipv6_prefix | string + '::' env.cluster.networking.interface + ':none' ) if env.use_ipv6 == True else '' }}" \
    {% endif %}
    --extra-args "nameserver={{ env.cluster.networking.nameserver1 }}" \
    --extra-args "{{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }}" \
    --extra-args "coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign" \
    --extra-args "{{ _vm_console }}" \
    --memballoon none \
    --graphics none \
    --wait=-1 \
    --noautoconsole
  when: env.z.high_availability == True and inventory_hostname == env.z.lpar3.hostname
