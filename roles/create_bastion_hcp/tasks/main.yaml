---
- name: Get ssh key of local host
  ansible.builtin.shell: cat {{ lookup('env', 'HOME') }}/.ssh/{{ hcp.ansible_key_name }}.pub
  register: ssh_output
  delegate_to: localhost

- name: Load ssh_key into a variable
  set_fact:
    ssh_key: "{{ ssh_output.stdout_lines[0] }}"

- name: Create Directory for images and bastion.ks
  file:
    path: /home/libvirt/images/
    recurse: true
    state: directory

- name: Setting vars for bstion.ks file creation
  set_fact:
    env:
      language: "{{ hcp.bastion_params.language }}"
      timezone: "{{ hcp.bastion_params.timezone }}"
      keyboard: "{{ hcp.bastion_params.keyboard }}"
      use_ipv6: False
      install_config:
        control:
          architecture: "s390x"
      cluster:
        networking:
          base_domain: "{{ hcp.bastion_params.base_domain }}"
      bastion:
        resources:
          swap: 4096
        networking:
          interface: "{{ hcp.bastion_params.interface }}"
          ip: "{{ hcp.bastion_params.ip }}"
          gateway: "{{ hcp.bastion_params.gateway }}"
          hostname: "{{ hcp.bastion_params.hostname }}"
          subnetmask: "{{ hcp.bastion_params.subnet_mask }}"
          nameserver1: "{{ hcp.bastion_params.nameserver }}"
      file_server:
        ip: "{{ hcp.bastion_params.file_server.ip }}"
        protocol: "{{ hcp.bastion_params.file_server.protocol }}"
        iso_mount_dir: "{{ hcp.bastion_params.file_server.iso_mount_dir }}"

- name: Create bastion.ks file
  template:
    src: ../create_bastion/templates/bastion-ks.cfg.j2
    dest: /home/libvirt/bastion.ks

- name: Adding root password for bastion to bastion.ks
  lineinfile:
    path: /home/libvirt/bastion.ks
    insertafter: '^lang.*'
    line: "rootpw {{ bastion_root_pw }}"

- name: Adding ssh key to bastion
  blockinfile:
    path: /home/libvirt/bastion.ks
    insertafter: '^echo.*'
    block: |
      mkdir -p /root/.ssh
      echo "{{ ssh_key }}" > /root/.ssh/authorized_keys
      chmod 0700 /root/.ssh
      chmod 0600 /root/.ssh/authorized_keys

- name: Create qemu image for bastion
  command: qemu-img create -f qcow2 {{ hcp.data_plane.kvm.storage.qcow.pool_path }}{{ hcp.control_plane.hosted_cluster_name }}-bastion.qcow2 100G
  when: hcp.data_plane.kvm.storage.type != 'dasd'
  
- name: Create bastion
  shell: |
    {% if hcp.data_plane.kvm.storage.type != "dasd" %}
    disk_param="{{ hcp.data_plane.kvm.storage.qcow.pool_path }}{{ hcp.control_plane.hosted_cluster_name }}-bastion.qcow2,format=qcow2,bus=virtio,cache=none"
    {% else %}
    disk_param="{{ hcp.bastion_params.disk }}"
    {% endif %}

    virt-install \
    --name {{ hcp.control_plane.hosted_cluster_name }}-bastion \
    --memory 4096 \
    --vcpus sockets=1,cores=4,threads=1 \
    --disk $disk_param  \
    --os-variant "rhel{{hcp.bastion_params.os_variant}}" \
    --network network:{{ hcp.bastion_params.network_name }} \
    --location '{{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}{{ ':' + env.file_server.port if env.file_server.port | default('') | length > 0 else '' }}/{{ env.file_server.iso_mount_dir }}/' \
    --rng=/dev/urandom --initrd-inject /home/libvirt/bastion.ks \
    --extra-args="inst.ks=file:/bastion.ks ip={{ hcp.bastion_params.ip }}::{{ hcp.bastion_params.gateway }}:{{hcp.bastion_params.subnet_mask}}:{{ hcp.bastion_params.hostname }}.{{ hcp.bastion_params.base_domain }}:{{ hcp.bastion_params.interface }}:none console=ttysclp0 nameserver={{ hcp.bastion_params.nameserver }}" \
    --noautoconsole \
    --wait -1

- name: Waiting 1 minute for automated bastion installation and configuration to complete
  ansible.builtin.pause:
    minutes: 1

- name: Add route to bastion from kvm_host
  command: "ip route add {{ hcp.bastion_params.ip  }} via {{ hcp.bastion_params.gateway }}"
  ignore_errors: yes
