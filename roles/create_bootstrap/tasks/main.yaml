---

# We create always a new bootstrap VM
- name: Start bootstrap installation
  tags: create_bootstrap
  ansible.builtin.shell: |
    set -o pipefail
    virsh destroy {{ env.cluster.nodes.bootstrap.vm_name }} || true
    virsh undefine {{ env.cluster.nodes.bootstrap.vm_name }} --remove-all-storage || true
    virt-install \
    --name {{ env.cluster.nodes.bootstrap.vm_name }} \
    --autostart \
    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.bootstrap.disk_size }}  \
    --ram {{ env.cluster.nodes.bootstrap.ram }} \
    --cpu host \
    --vcpus {{ env.cluster.nodes.bootstrap.vcpu }} \
    --network network={{ env.bridge_name }} \
    --location /var/lib/libvirt/images,kernel=rhcos-live-kernel-{{ env.openshift.version }}-{{ env.install_config.control.architecture }},initrd=rhcos-live-initramfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img \
    --extra-args "rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
    coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/rhcos-live-rootfs-{{ env.openshift.version }}-{{ env.install_config.control.architecture }}.img \
    ip={{ env.cluster.nodes.bootstrap.ip }}::{{ networking.gateway }}:{{ networking.subnetmask }}:{{ env.cluster.nodes.bootstrap.hostname }}::none:1500 \
    nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \
    coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/bootstrap.ign" \
    --graphics none \
    --wait=-1 \
    --noautoconsole

- name: Set bootstrap qcow2 permissions
  become: true
  tags: create_bootstrap
  command: chmod 600 /var/lib/libvirt/images/{{env.cluster.nodes.bootstrap.vm_name}}.qcow2

- name: Set bootstrap qcow2 ownership to qemu
  become: true
  tags: create_bootstrap
  command: chown qemu:qemu /var/lib/libvirt/images/{{env.cluster.nodes.bootstrap.vm_name}}.qcow2
