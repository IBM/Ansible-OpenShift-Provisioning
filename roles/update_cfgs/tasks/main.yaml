---

- name: Clean-up old config files for idempotency.
  tags: update_cfgs
  file:
    path: "{{ hostvars['file_server'].doc_root }}/{{ hostvars['file_server'].cfgs_dir }}/{{ hostname }}"
    state: absent

- name: Create directory for hypervisor's configuration files for installation.
  tags: update_cfgs
  file:
    path: "{{ hostvars['file_server'].doc_root }}/{{ hostvars['file_server'].cfgs_dir }}/{{ hostname }}"
    state: directory

- name: Extract NIC ID from Linux network device for input in prm file for boot.
  set_fact:
    nic_id: "{{ device1 | regex_replace('[^0-9]', '') | int }}"

- name: Create hash from password to input in kickstart file
  tags: update_cfgs
  shell: "echo '{{ ansible_become_password }}' | openssl passwd -6 -in -"
  register: user_pass_hash

- name: Create hash from root password to input in kickstart file
  tags: update_cfgs
  shell: "echo '{{ root_pass }}' | openssl passwd -6 -in -"
  register: root_pass_hash

- name: Find relative path between cfgs_dir and iso_mount_dir for use in ins file.
  tags: update_cfgs
  vars:
    dir1: "{{ hostvars['file_server'].doc_root }}/{{ hostvars['file_server'].cfgs_dir }}/{{ hostname }}"
    dir2: "{{ hostvars['file_server'].doc_root }}/{{ hostvars['file_server'].iso_mount_dir }}"
  ansible.builtin.command: 
    cmd: "realpath --relative-to={{ dir1 }} {{ dir2 }}"
  register: relative_path

- name: Template configuration files out to fileserver.
  tags: update_cfgs
  template:
    src: "{{ item }}.j2"
    dest: "{{ hostvars['file_server'].doc_root }}/{{ hostvars['file_server'].cfgs_dir }}/{{ hostname }}/{{ item }}"
  loop: 
    - hypervisor.prm
    - hypervisor.ins
    - hypervisor.cfg