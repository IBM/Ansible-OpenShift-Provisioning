---

- name: Getting Hosted Control Plane Namespace
  set_fact: 
    HOSTED_CONTROL_PLANE_NAMESPACE: "{{ hypershift.hcp.CLUSTERS_NAMESPACE }}-{{ hypershift.hcp.HOSTED_CLUSTER_NAME }}"

- name: Check if Hosted Control Plane Namespace exists 
  k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ HOSTED_CONTROL_PLANE_NAMESPACE }}"
  register: namespace_check
  #ignore_errors: yes

- name: Create Hosted Control Plane Namespace 
  k8s:
    api_version: v1
    kind: Namespace
    name: "{{ HOSTED_CONTROL_PLANE_NAMESPACE }}"
    state: present
  when: namespace_check.resources | length == 0 

- name: Get ssh key for host
  slurp:
    src: "{{ hypershift.hcp.SSH_PUB_KEY }}"
  register: remote_content_encoded


- name: Decode the ssh key 
  set_fact:
    ssh_key: "{{remote_content_encoded.content | b64decode |replace('\n','')}}"

- name: Create a Hosted Cluster
  command: >
    hypershift create cluster agent 
    --name={{ hypershift.hcp.HOSTED_CLUSTER_NAME }} 
    --pull-secret={{ hypershift.hcp.PULL_SECRET_FILE }} 
    --agent-namespace={{ HOSTED_CONTROL_PLANE_NAMESPACE }} 
    --namespace={{ hypershift.hcp.CLUSTERS_NAMESPACE }} 
    --base-domain= {{ hypershift.hcp.BASEDOMAIN }} 
    --api-server-address=api.{{ hypershift.hcp.HOSTED_CLUSTER_NAME }}.{{ hypershift.hcp.BASEDOMAIN }} 
    --ssh-key ~/.ssh/{{ env.ansible_key_name }}.pub
    --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.OCP_RELEASE }} 


- name: Waiting for Hosted Control Plane to be available
  command: oc wait --timeout=30m --for=condition=Available --namespace={{ hypershift.hcp.CLUSTERS_NAMESPACE }} hostedcluster/{{ hypershift.hcp.HOSTED_CLUSTER_NAME }}

- name: Wait for pods to come up in Hosted Cluster Namespace
  shell: oc get pods -n {{ HOSTED_CONTROL_PLANE_NAMESPACE }} | wc -l
  register: pod_count
  until: pod_count.stdout > '25'
  retries: 40
  delay: 10


- name: Wait for all pods to be in Running State in  Hosted Cluster Namespace
  shell: oc get pods -n {{ HOSTED_CONTROL_PLANE_NAMESPACE }}  --no-headers | grep -v 'Running\|Completed\|Terminating' | wc -l
  register: pod_status
  until: pod_status.stdout == '0'
  retries: 30
  delay: 10

- name: Create InfraEnv Resource
  k8s:
    namespace: "{{ HOSTED_CONTROL_PLANE_NAMESPACE }}"
    definition:
      apiVersion: agent-install.openshift.io/v1beta1
      kind: InfraEnv
      metadata:
        name: "{{ hypershift.hcp.HOSTED_CLUSTER_NAME }}"
      spec:
        cpuArchitecture: "{{ hypershift.hcp.ARCH }}"
        pullSecretRef:
          name: pull-secret
        sshAuthorizedKey: "{{ssh_key}}"



- name: Wait for ISO to generate in InfraEnv 
  shell: oc get InfraEnv -n  {{ HOSTED_CONTROL_PLANE_NAMESPACE }} --no-headers
  register: infra
  until: infra.stdout.split(' ')[-1] != ''
  retries: 60
  delay: 20
